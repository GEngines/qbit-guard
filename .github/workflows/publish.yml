name: Build & Publish Docker image

on:
  # Build on pushes to main that touch Dockerfile or src, and on tags (e.g. v1.2.3)
  push:
    branches: [ main ]
    paths:
      - "Dockerfile"
      - "src/**"
      - ".github/workflows/publish.yml"
    tags:
      - "v*"
  # Allow manual runs (optional custom tag)
  workflow_dispatch:
    inputs:
      extra_tag:
        description: "Optional extra tag to publish (e.g. 1.0.0-rc1)"
        required: false
        type: string
      version_increment:
        description: "Version increment type (patch, minor, major)"
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: "Optional specific version to use (e.g. 2.0.0) - overrides increment type"
        required: false
        type: string

permissions:
  contents: write  # needed for version tag creation
  packages: write  # required for ghcr.io push

concurrency:
  group: docker-publish-${{ github.ref }}
  cancel-in-progress: true

env:
  # Set your image name here (lowercase). If you prefer the repo name, set to ${{ github.event.repository.name }}.
  IMAGE_NAME: qbit-guard
  # Current date in ISO format for reference
  CURRENT_DATE: '2025-08-29'

jobs:
  version:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
    outputs:
      new_version: ${{ steps.version_info.outputs.new_version }}
      new_tag: ${{ steps.version_info.outputs.new_tag }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for custom version
        id: check_custom
        run: |
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            echo "Using custom version: ${{ github.event.inputs.custom_version }}"
            echo "use_custom=true" >> $GITHUB_OUTPUT
            echo "custom_version=${{ github.event.inputs.custom_version }}" >> $GITHUB_OUTPUT
            
            # Check if custom version starts with 'v'
            if [[ "${{ github.event.inputs.custom_version }}" == v* ]]; then
              echo "custom_tag=${{ github.event.inputs.custom_version }}" >> $GITHUB_OUTPUT
            else
              echo "custom_tag=v${{ github.event.inputs.custom_version }}" >> $GITHUB_OUTPUT
            fi
          else
            echo "No custom version specified, will use version increment"
            echo "use_custom=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Increment version and push tag
        id: tag_version
        if: steps.check_custom.outputs.use_custom != 'true'
        uses: anothrNick/github-tag-action@1.64.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: ${{ github.event.inputs.version_increment || 'patch' }}
      
      - name: Create custom version tag
        if: steps.check_custom.outputs.use_custom == 'true'
        run: |
          echo "Creating custom version tag: ${{ steps.check_custom.outputs.custom_tag }}"
          git tag ${{ steps.check_custom.outputs.custom_tag }}
          git push origin ${{ steps.check_custom.outputs.custom_tag }}
      
      - name: Set version output
        id: version_info
        run: |
          if [ "${{ steps.check_custom.outputs.use_custom }}" == "true" ]; then
            echo "new_tag=${{ steps.check_custom.outputs.custom_tag }}" >> $GITHUB_OUTPUT
            echo "new_version=${{ steps.check_custom.outputs.custom_version }}" >> $GITHUB_OUTPUT
          else
            echo "new_tag=${{ steps.tag_version.outputs.new_tag }}" >> $GITHUB_OUTPUT
            echo "new_version=${{ steps.tag_version.outputs.new_version }}" >> $GITHUB_OUTPUT
          fi
          
  docker:
    runs-on: ubuntu-latest
    needs: [version]
    # Run this job even if the version job is skipped (for tag pushes)
    if: always() && (needs.version.result == 'success' || needs.version.result == 'skipped')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute registry image name (lowercase owner)
        id: names
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE="${OWNER_LC}/${{ env.IMAGE_NAME }}"
          echo "owner_lc=$OWNER_LC" >> $GITHUB_OUTPUT
          echo "image=ghcr.io/${IMAGE}" >> $GITHUB_OUTPUT

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Set new version tag
        id: version_tag
        run: |
          if [ -n "${{ needs.version.outputs.new_tag }}" ]; then
            echo "Using new version tag: ${{ needs.version.outputs.new_tag }}"
            VERSION="${{ needs.version.outputs.new_tag }}"
            if [[ "$VERSION" == v* ]]; then
              VERSION="${VERSION:1}"
            fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "has_new_version=true" >> $GITHUB_OUTPUT
            
            # Check if version contains "dev" and set flag
            if [[ "$VERSION" == *"dev"* ]]; then
              echo "is_dev_version=true" >> $GITHUB_OUTPUT
            else
              echo "is_dev_version=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "No new version generated, checking if current tag contains dev"
            if [[ "${{ github.ref_name }}" == *"dev"* ]]; then
              echo "is_dev_version=true" >> $GITHUB_OUTPUT
            else
              echo "is_dev_version=false" >> $GITHUB_OUTPUT
            fi
            echo "has_new_version=false" >> $GITHUB_OUTPUT
          fi

      # Pass BUILD_VERSION to Docker build
      - name: Set build args
        id: build_args
        run: |
          if [ "${{ steps.version_tag.outputs.has_new_version }}" == "true" ]; then
            echo "build_version=${{ steps.version_tag.outputs.version }}" >> $GITHUB_OUTPUT
          else
            # For tag pushes, use the tag name without the 'v' prefix
            VERSION="${{ github.ref_name }}"
            if [[ "$VERSION" == v* ]]; then
              VERSION="${VERSION:1}"
            fi
            echo "build_version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.names.outputs.image }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            ${{ steps.version_tag.outputs.is_dev_version != 'true' && 'type=raw,value=latest' || '' }}
            ${{ steps.version_tag.outputs.is_dev_version == 'true' && 'type=raw,value=dev' || '' }}
            type=ref,event=branch
            type=sha
            ${{ steps.version_tag.outputs.has_new_version == 'true' && format('type=raw,value={0}', steps.version_tag.outputs.version) || '' }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            ${{ steps.version_tag.outputs.has_new_version == 'true' && format('org.opencontainers.image.version={0}', steps.version_tag.outputs.version) || '' }}

      - name: Build & (conditionally) push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_VERSION=${{ steps.build_args.outputs.build_version }}

      - name: Push extra tag (from workflow_dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.extra_tag != '' }}
        run: |
          SRC="${{ steps.names.outputs.image }}:$(echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n' | head -n1 | xargs)"
          TGT="${{ steps.names.outputs.image }}:${{ inputs.extra_tag }}"
          echo "Retagging $SRC -> $TGT"
          docker buildx imagetools create -t "$TGT" "$SRC"